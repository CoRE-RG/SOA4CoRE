//
// Generated file, do not edit! Created by nedtool 5.1 from soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SOQOSMW_QOSNEGOTIATIONPROTOCOL_M_H
#define __SOQOSMW_QOSNEGOTIATIONPROTOCOL_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "soqosmw/messages/Envelope_m.h"
// }}


namespace soqosmw {

/**
 * Enum generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:28</tt> by nedtool.
 * <pre>
 * //Groups of QoS Requirements
 * enum QoSGroups
 * {
 * 
 *     RT = 0; // RealTime Requirements --> AVB / TSN
 *     STD = 1; // Standard Requirements --> BE TCP/UDP IP
 *     WEB = 2; // Web Requirements --> HTTP
 * }
 * </pre>
 */
enum QoSGroups {
    RT = 0,
    STD = 1,
    WEB = 2
};

/**
 * Enum generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:35</tt> by nedtool.
 * <pre>
 * //Type of Negotiation message for \@see QoSNegotiationProtocol
 * enum QoSNegotiationMsgType
 * {
 * 
 *     QoS_Request = 0;
 *     QoS_Response = 1;
 *     QoS_Establish = 2;
 *     QoS_Finalise = 3;
 * }
 * </pre>
 */
enum QoSNegotiationMsgType {
    QoS_Request = 0,
    QoS_Response = 1,
    QoS_Establish = 2,
    QoS_Finalise = 3
};

/**
 * Enum generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:43</tt> by nedtool.
 * <pre>
 * //Type of Negotiation response payload status \@see QoSNegotiationResponsePayload
 * enum QoSNegotiationStatus
 * {
 * 
 *     Failure = 0;
 *     Success = 1;
 * }
 * </pre>
 */
enum QoSNegotiationStatus {
    Failure = 0,
    Success = 1
};

/**
 * Class generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:49</tt> by nedtool.
 * <pre>
 * //Message type for all Protocol message of the qos negotiation
 * packet QoSNegotiationProtocol extends soqosmw::Envelope
 * {
 *     protocol = SOQoSMWProtocols::QOSNEGOTIATIONPROTOCOL; //indicates the type of message for better casting.
 *     //receiver; inherited from Envelope
 *     //sender; inherited from Envelope  
 *     int messageType \@enum(QoSNegotiationMsgType); //indicates the type of message for better casting.
 *     int qosClass \@enum(QoSGroups);
 * }
 * </pre>
 */
class QoSNegotiationProtocol : public ::soqosmw::Envelope
{
  protected:
    int messageType;
    int qosClass;

  private:
    void copy(const QoSNegotiationProtocol& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationProtocol&);

  public:
    QoSNegotiationProtocol(const char *name=nullptr, short kind=0);
    QoSNegotiationProtocol(const QoSNegotiationProtocol& other);
    virtual ~QoSNegotiationProtocol();
    QoSNegotiationProtocol& operator=(const QoSNegotiationProtocol& other);
    virtual QoSNegotiationProtocol *dup() const override {return new QoSNegotiationProtocol(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);
    virtual int getQosClass() const;
    virtual void setQosClass(int qosClass);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationProtocol& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationProtocol& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:58</tt> by nedtool.
 * <pre>
 * //request for qos negotiation
 * packet QoSNegotiationRequest extends QoSNegotiationProtocol
 * {
 *     //protocol = SOQoSMWProtocols::QOSNEGOTIATIONPROTOCOL; //inherited from QoSNegotiationProtocol and Envelope
 *     //receiver; inherited from Envelope
 *     //sender; inherited from Envelope
 *     messageType = QoSNegotiationMsgType::QoS_Request; //inherited from QoSNegotiationProtocol
 *     //qosClass; inherited from QoSNegotiationProtocol
 * }
 * </pre>
 */
class QoSNegotiationRequest : public ::soqosmw::QoSNegotiationProtocol
{
  protected:

  private:
    void copy(const QoSNegotiationRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationRequest&);

  public:
    QoSNegotiationRequest(const char *name=nullptr, short kind=0);
    QoSNegotiationRequest(const QoSNegotiationRequest& other);
    virtual ~QoSNegotiationRequest();
    QoSNegotiationRequest& operator=(const QoSNegotiationRequest& other);
    virtual QoSNegotiationRequest *dup() const override {return new QoSNegotiationRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:67</tt> by nedtool.
 * <pre>
 * //response to a request for qos negotiation
 * packet QoSNegotiationResponse extends QoSNegotiationProtocol
 * {
 *     //protocol = SOQoSMWProtocols::QOSNEGOTIATIONPROTOCOL; //inherited from QoSNegotiationProtocol and Envelope
 *     //receiver; inherited from Envelope
 *     //sender; inherited from Envelope
 *     messageType = QoSNegotiationMsgType::QoS_Response; //inherited from QoSNegotiationProtocol 
 *     //qosClass; inherited form QoSNegotiationProtocol
 *     int responseStatus \@enum(QoSNegotiationStatus);
 * }
 * </pre>
 */
class QoSNegotiationResponse : public ::soqosmw::QoSNegotiationProtocol
{
  protected:
    int responseStatus;

  private:
    void copy(const QoSNegotiationResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationResponse&);

  public:
    QoSNegotiationResponse(const char *name=nullptr, short kind=0);
    QoSNegotiationResponse(const QoSNegotiationResponse& other);
    virtual ~QoSNegotiationResponse();
    QoSNegotiationResponse& operator=(const QoSNegotiationResponse& other);
    virtual QoSNegotiationResponse *dup() const override {return new QoSNegotiationResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getResponseStatus() const;
    virtual void setResponseStatus(int responseStatus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:77</tt> by nedtool.
 * <pre>
 * //establish the negotiated connection
 * packet QoSNegotiationEstablish extends QoSNegotiationProtocol
 * {
 *     //protocol = SOQoSMWProtocols::QOSNEGOTIATIONPROTOCOL; //inherited from QoSNegotiationProtocol and Envelope
 *     //receiver; inherited from Envelope
 *     //sender; inherited from Envelope
 *     messageType = QoSNegotiationMsgType::QoS_Establish; //inherited from QoSNegotiationProtocol
 *     //qosClass; inherited form QoSNegotiationProtocol
 * }
 * </pre>
 */
class QoSNegotiationEstablish : public ::soqosmw::QoSNegotiationProtocol
{
  protected:

  private:
    void copy(const QoSNegotiationEstablish& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationEstablish&);

  public:
    QoSNegotiationEstablish(const char *name=nullptr, short kind=0);
    QoSNegotiationEstablish(const QoSNegotiationEstablish& other);
    virtual ~QoSNegotiationEstablish();
    QoSNegotiationEstablish& operator=(const QoSNegotiationEstablish& other);
    virtual QoSNegotiationEstablish *dup() const override {return new QoSNegotiationEstablish(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationEstablish& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationEstablish& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/messages/QoSNegotiationProtocol/QoSNegotiationProtocol.msg:86</tt> by nedtool.
 * <pre>
 * //finalise the connection
 * packet QoSNegotiationFinalise extends QoSNegotiationProtocol
 * {
 *     //protocol = SOQoSMWProtocols::QOSNEGOTIATIONPROTOCOL; //inherited from QoSNegotiationProtocol and Envelope
 *     //receiver; inherited from Envelope
 *     //sender; inherited from Envelope
 *     messageType = QoSNegotiationMsgType::QoS_Finalise; //inherited from QoSNegotiationProtocol
 *     //qosClass; inherited form QoSNegotiationProtocol
 *     //TODO add how to connect
 * }
 * </pre>
 */
class QoSNegotiationFinalise : public ::soqosmw::QoSNegotiationProtocol
{
  protected:

  private:
    void copy(const QoSNegotiationFinalise& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationFinalise&);

  public:
    QoSNegotiationFinalise(const char *name=nullptr, short kind=0);
    QoSNegotiationFinalise(const QoSNegotiationFinalise& other);
    virtual ~QoSNegotiationFinalise();
    QoSNegotiationFinalise& operator=(const QoSNegotiationFinalise& other);
    virtual QoSNegotiationFinalise *dup() const override {return new QoSNegotiationFinalise(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationFinalise& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationFinalise& obj) {obj.parsimUnpack(b);}

} // namespace soqosmw

#endif // ifndef __SOQOSMW_QOSNEGOTIATIONPROTOCOL_M_H

