//
// Generated file, do not edit! Created by nedtool 5.1 from soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SOQOSMW_QOSNEGOTIATIONMESSAGES_M_H
#define __SOQOSMW_QOSNEGOTIATIONMESSAGES_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include "soqosmw/base/EndpointDescription.h"
    using namespace soqosmw;
// }}


namespace soqosmw {

/**
 * Enum generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:29</tt> by nedtool.
 * <pre>
 * //Groups of QoS Requirements
 * enum QoSGroups
 * {
 * 
 *     QoSGroup_RT = 0;
 *     QoSGroup_STD = 1;
 *     QoSGroup_WEB = 2;
 * }
 * </pre>
 */
enum QoSGroups {
    QoSGroup_RT = 0,
    QoSGroup_STD = 1,
    QoSGroup_WEB = 2
};

/**
 * Enum generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:36</tt> by nedtool.
 * <pre>
 * //Type of Negotiation message for \@see QoSNegotiation
 * enum QoSNegotiationMsgType
 * {
 * 
 *     QoS_Request = 0;
 *     QoS_Response = 1;
 * }
 * </pre>
 */
enum QoSNegotiationMsgType {
    QoS_Request = 0,
    QoS_Response = 1
};

/**
 * Enum generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:42</tt> by nedtool.
 * <pre>
 * //Type of Connection Establish message for \@see QoSConnectionEstablish
 * enum QoSConnectionEstablishMsgType
 * {
 * 
 *     Establish_Request = 0;
 *     Establish_Success = 1;
 *     Establish_Failure = 2;
 * }
 * </pre>
 */
enum QoSConnectionEstablishMsgType {
    Establish_Request = 0,
    Establish_Success = 1,
    Establish_Failure = 2
};

/**
 * Enum generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:49</tt> by nedtool.
 * <pre>
 * //Type of Negotiation response payload status \@see QoSNegotiationResponsePayload
 * enum QoSNegotiationResponseStatus
 * {
 * 
 *     QoS_ResponseStatusSuccess = 0;
 *     QoS_ResponseStatusFailure = 1;
 * }
 * 
 * //*****************************************  /
 * //	QoS Negotiation Payload Specification	//
 * //*****************************************  /
 * </pre>
 */
enum QoSNegotiationResponseStatus {
    QoS_ResponseStatusSuccess = 0,
    QoS_ResponseStatusFailure = 1
};

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:59</tt> by nedtool.
 * <pre>
 * //common parameters of qos negotiation
 * packet QoSNegotiationPayload
 * {
 *     int qosGroup \@enum(QoSGroups);
 * }
 * </pre>
 */
class QoSNegotiationPayload : public ::omnetpp::cPacket
{
  protected:
    int qosGroup;

  private:
    void copy(const QoSNegotiationPayload& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationPayload&);

  public:
    QoSNegotiationPayload(const char *name=nullptr, short kind=0);
    QoSNegotiationPayload(const QoSNegotiationPayload& other);
    virtual ~QoSNegotiationPayload();
    QoSNegotiationPayload& operator=(const QoSNegotiationPayload& other);
    virtual QoSNegotiationPayload *dup() const override {return new QoSNegotiationPayload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getQosGroup() const;
    virtual void setQosGroup(int qosGroup);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationPayload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationPayload& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:64</tt> by nedtool.
 * <pre>
 * //special parameters for requests
 * packet QoSNegotiationRequestPayload extends QoSNegotiationPayload
 * {
 * }
 * </pre>
 */
class QoSNegotiationRequestPayload : public ::soqosmw::QoSNegotiationPayload
{
  protected:

  private:
    void copy(const QoSNegotiationRequestPayload& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationRequestPayload&);

  public:
    QoSNegotiationRequestPayload(const char *name=nullptr, short kind=0);
    QoSNegotiationRequestPayload(const QoSNegotiationRequestPayload& other);
    virtual ~QoSNegotiationRequestPayload();
    QoSNegotiationRequestPayload& operator=(const QoSNegotiationRequestPayload& other);
    virtual QoSNegotiationRequestPayload *dup() const override {return new QoSNegotiationRequestPayload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationRequestPayload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationRequestPayload& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:69</tt> by nedtool.
 * <pre>
 * //special parameters for response
 * packet QoSNegotiationResponsePayload extends QoSNegotiationPayload
 * {
 *     int resposeStatus \@enum(QoSNegotiationResponseStatus);
 * }
 * 
 * //*****************************************  /
 * //	QoS Negotiation Message Specification	//
 * //*****************************************  /
 * </pre>
 */
class QoSNegotiationResponsePayload : public ::soqosmw::QoSNegotiationPayload
{
  protected:
    int resposeStatus;

  private:
    void copy(const QoSNegotiationResponsePayload& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationResponsePayload&);

  public:
    QoSNegotiationResponsePayload(const char *name=nullptr, short kind=0);
    QoSNegotiationResponsePayload(const QoSNegotiationResponsePayload& other);
    virtual ~QoSNegotiationResponsePayload();
    QoSNegotiationResponsePayload& operator=(const QoSNegotiationResponsePayload& other);
    virtual QoSNegotiationResponsePayload *dup() const override {return new QoSNegotiationResponsePayload(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getResposeStatus() const;
    virtual void setResposeStatus(int resposeStatus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationResponsePayload& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationResponsePayload& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:77</tt> by nedtool.
 * <pre>
 * packet QoSNegotiation
 * {
 *     int type \@enum(QoSNegotiationMsgType);
 *     EndpointDescription providerDescription;
 *     EndpointDescription clientDescription;
 *     QoSNegotiationPayload payload;
 * }
 * </pre>
 */
class QoSNegotiation : public ::omnetpp::cPacket
{
  protected:
    int type;
    EndpointDescription providerDescription;
    EndpointDescription clientDescription;
    QoSNegotiationPayload payload;

  private:
    void copy(const QoSNegotiation& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiation&);

  public:
    QoSNegotiation(const char *name=nullptr, short kind=0);
    QoSNegotiation(const QoSNegotiation& other);
    virtual ~QoSNegotiation();
    QoSNegotiation& operator=(const QoSNegotiation& other);
    virtual QoSNegotiation *dup() const override {return new QoSNegotiation(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual EndpointDescription& getProviderDescription();
    virtual const EndpointDescription& getProviderDescription() const {return const_cast<QoSNegotiation*>(this)->getProviderDescription();}
    virtual void setProviderDescription(const EndpointDescription& providerDescription);
    virtual EndpointDescription& getClientDescription();
    virtual const EndpointDescription& getClientDescription() const {return const_cast<QoSNegotiation*>(this)->getClientDescription();}
    virtual void setClientDescription(const EndpointDescription& clientDescription);
    virtual QoSNegotiationPayload& getPayload();
    virtual const QoSNegotiationPayload& getPayload() const {return const_cast<QoSNegotiation*>(this)->getPayload();}
    virtual void setPayload(const QoSNegotiationPayload& payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiation& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiation& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:84</tt> by nedtool.
 * <pre>
 * packet QoSNegotiationRequest extends QoSNegotiation
 * {
 *     type = QoSNegotiationMsgType::QoS_Request;
 *     QoSNegotiationRequestPayload payload;
 * }
 * </pre>
 */
class QoSNegotiationRequest : public ::soqosmw::QoSNegotiation
{
  protected:
    QoSNegotiationRequestPayload payload;

  private:
    void copy(const QoSNegotiationRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationRequest&);

  public:
    QoSNegotiationRequest(const char *name=nullptr, short kind=0);
    QoSNegotiationRequest(const QoSNegotiationRequest& other);
    virtual ~QoSNegotiationRequest();
    QoSNegotiationRequest& operator=(const QoSNegotiationRequest& other);
    virtual QoSNegotiationRequest *dup() const override {return new QoSNegotiationRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual QoSNegotiationRequestPayload& getPayload();
    virtual const QoSNegotiationRequestPayload& getPayload() const {return const_cast<QoSNegotiationRequest*>(this)->getPayload();}
    virtual void setPayload(const QoSNegotiationRequestPayload& payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:89</tt> by nedtool.
 * <pre>
 * packet QoSNegotiationResponse extends QoSNegotiation
 * {
 *     type = QoSNegotiationMsgType::QoS_Response;
 *     QoSNegotiationResponsePayload payload;
 * }
 * </pre>
 */
class QoSNegotiationResponse : public ::soqosmw::QoSNegotiation
{
  protected:
    QoSNegotiationResponsePayload payload;

  private:
    void copy(const QoSNegotiationResponse& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSNegotiationResponse&);

  public:
    QoSNegotiationResponse(const char *name=nullptr, short kind=0);
    QoSNegotiationResponse(const QoSNegotiationResponse& other);
    virtual ~QoSNegotiationResponse();
    QoSNegotiationResponse& operator=(const QoSNegotiationResponse& other);
    virtual QoSNegotiationResponse *dup() const override {return new QoSNegotiationResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual QoSNegotiationResponsePayload& getPayload();
    virtual const QoSNegotiationResponsePayload& getPayload() const {return const_cast<QoSNegotiationResponse*>(this)->getPayload();}
    virtual void setPayload(const QoSNegotiationResponsePayload& payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSNegotiationResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSNegotiationResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>soqosmw/qosmanagement/negotiation/messages/QoSNegotiationMessages.msg:94</tt> by nedtool.
 * <pre>
 * packet QoSConnectionEstablish
 * {
 *     int type \@enum(QoSConnectionEstablishMsgType);
 *     EndpointDescription providerDescription;
 *     EndpointDescription clientDescription;
 * }
 * </pre>
 */
class QoSConnectionEstablish : public ::omnetpp::cPacket
{
  protected:
    int type;
    EndpointDescription providerDescription;
    EndpointDescription clientDescription;

  private:
    void copy(const QoSConnectionEstablish& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QoSConnectionEstablish&);

  public:
    QoSConnectionEstablish(const char *name=nullptr, short kind=0);
    QoSConnectionEstablish(const QoSConnectionEstablish& other);
    virtual ~QoSConnectionEstablish();
    QoSConnectionEstablish& operator=(const QoSConnectionEstablish& other);
    virtual QoSConnectionEstablish *dup() const override {return new QoSConnectionEstablish(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual EndpointDescription& getProviderDescription();
    virtual const EndpointDescription& getProviderDescription() const {return const_cast<QoSConnectionEstablish*>(this)->getProviderDescription();}
    virtual void setProviderDescription(const EndpointDescription& providerDescription);
    virtual EndpointDescription& getClientDescription();
    virtual const EndpointDescription& getClientDescription() const {return const_cast<QoSConnectionEstablish*>(this)->getClientDescription();}
    virtual void setClientDescription(const EndpointDescription& clientDescription);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QoSConnectionEstablish& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QoSConnectionEstablish& obj) {obj.parsimUnpack(b);}

} // namespace soqosmw

#endif // ifndef __SOQOSMW_QOSNEGOTIATIONMESSAGES_M_H

